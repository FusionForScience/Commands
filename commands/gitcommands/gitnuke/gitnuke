#!/bin/bash
# Created by Leonid Krashanoff
# Email: krashanoff@ucla.edu

# The gitnuke script performs the following actions:
# - Generates a patch for your current work, which is saved to the first argument
#   or [repoPath]/gitnuke
# - Resets the local history to the previous commit
# - Pushes to origin with the --force flag, overwriting its copy of the history
# - Leaves you to ponder your actions
# Please be aware that your patch will not automatically be committed. This is
# left to the user to decide.
#
# Known issues: will erase two commits if there are no changes to be committed at
# command runtime.

if [ ! -z "$(git rev-parse)" ]
then
	echo "gitnuke must be run from within a git repository."
	exit
fi

toplevel="$(git rev-parse --show-toplevel)"

if [ $# = 1 ] && [ -d "$1" ]
then
	echo "Saving patch file to "$1""
	path="$1"
elif [ $# = 1 ] && [ ! -d "$1" ]
then
	path=""$toplevel"/gitnuke"
	echo ""$1" is not a valid directory. Defaulting to "$path"."
fi

# Verify that a commit message has been passed to this command.
# If no message has been passed, throw an error.
while [ true ]
do
	echo "This command will erase your previous commit from both the remote and local histories.\
	Are you sure you want to do this? [y/n]"
	read confirm

	if [ "$confirm" = "n" ] || [ "$confirm" = "N" ]
	then
		exit
	elif [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]
	then
		continue
	else
		break
	fi
done

prevcommit="$(git rev-parse --short=7 HEAD)"

# Create temporary file
tmp="$(mktemp)"

# Generate patch
git add .
git commit -am "gitnuke generated backup of "$prevcommit" and later work"
git diff HEAD~2 HEAD > "$tmp"

# Nuke previous commit
git reset --hard HEAD~2
git push --force

# Create gitnuke folder if it doesn't exist
if [ ! -d "$toplevel"/gitnuke ]
then
	mkdir "$toplevel"/gitnuke
fi

# Write the patch
cat "$tmp" > "$path"/"$prevcommit".diff
rm "$tmp"

echo
echo "Commit nuked."